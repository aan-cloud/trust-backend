// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  userName String @unique
  email    String @unique
  password String
  description String? @db.VarChar(400)
  avatarUrl String?
  addressLine String?

  carts  Cart[]
  wishList WishList[]
  roles  UserRole[]  @relation("UserRoles")
  tokens UserToken[] @relation("UserTokens")
  products Product[]
  productRates Rating[]
  transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
  @@index([id, userName, email])
}

model Role {
  id          String @id @default(uuid())
  roleName    String @db.VarChar(50)
  description String @db.VarChar(100)

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserRoles", fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  @@map("user_roles")
  @@unique([userId, roleId])
}

model UserToken {
  id    String @id @default(uuid())
  token String

  userId String
  user   User   @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)

  issuedAt  DateTime @default(now())
  expiresAt DateTime

  @@index([token, expiresAt])
  @@map("user_tokens")
}

model Product {
  id          String @id @default(uuid())
  name        String @unique
  slug        String @unique
  description String
  price       Int
  stock       Int
  publish     Boolean

  cartItems CartItem[]
  transactionItems TransactionItem[]
  imageUrl Image[]
  wishListItems WishListItem[]
  ratings Rating[]

  userId String
  user   User   @relation(fields: [userId], references: [id])
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@index([slug, id])
  @@map("products")
}

model Category {
  id String @id @default(uuid())
  name String @unique

  products Product[]

  @@map("categories")
}

model Image {
  id String @id @default(uuid())

  imageUrl String @db.VarChar(200) @unique

  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([imageUrl])
  @@map("images")
}

model CartItem {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int @default(1)

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@map("cart_items")
}

model Cart {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model WishListItem {
  id String @id @default(uuid())

  productId String
  product Product @relation(fields: [productId], references: [id])

  wishListId String
  wishList WishList @relation(fields: [wishListId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wish_list_items")
}

model WishList {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id])

  wishList WishListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wish_lists")
}

model Rating {
  id String @id @default(uuid())
  rate Int @db.Integer
  comment String @db.VarChar(1000)

  productId String
  product Product @relation(fields: [productId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
}

model Transaction {
  id                   String   @id @default(uuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  amount               Int
  currency             String
  status               String   @default("PENDING") // PENDING, SUCCESS, FAILED
  stripePaymentId String  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  items                TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id String @id @default(uuid())

  product Product @relation(fields: [productId], references: [id])
  productId String

  transaction Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  @@map("transaction_items")
}

// Soon => Order, Message.